// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srs-info.proto

#include "srs-info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_srs_2dinfo_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_srs_2dinfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CHANNLE_EST;
}  // namespace protobuf_srs_2dinfo_2eproto
namespace protocol {
class NR_SRS_IQ_ESTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NR_SRS_IQ_EST>
      _instance;
} _NR_SRS_IQ_EST_default_instance_;
class CHANNLE_ESTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CHANNLE_EST>
      _instance;
} _CHANNLE_EST_default_instance_;
}  // namespace protocol
namespace protobuf_srs_2dinfo_2eproto {
static void InitDefaultsNR_SRS_IQ_EST() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_NR_SRS_IQ_EST_default_instance_;
    new (ptr) ::protocol::NR_SRS_IQ_EST();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::NR_SRS_IQ_EST::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NR_SRS_IQ_EST =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNR_SRS_IQ_EST}, {
      &protobuf_srs_2dinfo_2eproto::scc_info_CHANNLE_EST.base,}};

static void InitDefaultsCHANNLE_EST() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_CHANNLE_EST_default_instance_;
    new (ptr) ::protocol::CHANNLE_EST();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::CHANNLE_EST::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CHANNLE_EST =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCHANNLE_EST}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NR_SRS_IQ_EST.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CHANNLE_EST.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::NR_SRS_IQ_EST, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::NR_SRS_IQ_EST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::NR_SRS_IQ_EST, channle_est_list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::CHANNLE_EST, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::CHANNLE_EST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::CHANNLE_EST, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::CHANNLE_EST, real_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::protocol::NR_SRS_IQ_EST)},
  { 7, 14, sizeof(::protocol::CHANNLE_EST)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::_NR_SRS_IQ_EST_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::_CHANNLE_EST_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "srs-info.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016srs-info.proto\022\010protocol\"@\n\rNR_SRS_IQ_"
      "EST\022/\n\020CHANNLE_EST_LIST\030\004 \003(\0132\025.protocol"
      ".CHANNLE_EST\"*\n\013CHANNLE_EST\022\r\n\005image\030\001 \002"
      "(\005\022\014\n\004real\030\002 \002(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 136);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "srs-info.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_srs_2dinfo_2eproto
namespace protocol {

// ===================================================================

void NR_SRS_IQ_EST::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NR_SRS_IQ_EST::kCHANNLEESTLISTFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NR_SRS_IQ_EST::NR_SRS_IQ_EST()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_srs_2dinfo_2eproto::scc_info_NR_SRS_IQ_EST.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.NR_SRS_IQ_EST)
}
NR_SRS_IQ_EST::NR_SRS_IQ_EST(const NR_SRS_IQ_EST& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      channle_est_list_(from.channle_est_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.NR_SRS_IQ_EST)
}

void NR_SRS_IQ_EST::SharedCtor() {
}

NR_SRS_IQ_EST::~NR_SRS_IQ_EST() {
  // @@protoc_insertion_point(destructor:protocol.NR_SRS_IQ_EST)
  SharedDtor();
}

void NR_SRS_IQ_EST::SharedDtor() {
}

void NR_SRS_IQ_EST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NR_SRS_IQ_EST::descriptor() {
  ::protobuf_srs_2dinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_srs_2dinfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NR_SRS_IQ_EST& NR_SRS_IQ_EST::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_srs_2dinfo_2eproto::scc_info_NR_SRS_IQ_EST.base);
  return *internal_default_instance();
}


void NR_SRS_IQ_EST::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NR_SRS_IQ_EST)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channle_est_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NR_SRS_IQ_EST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.NR_SRS_IQ_EST)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.CHANNLE_EST CHANNLE_EST_LIST = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_channle_est_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.NR_SRS_IQ_EST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.NR_SRS_IQ_EST)
  return false;
#undef DO_
}

void NR_SRS_IQ_EST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.NR_SRS_IQ_EST)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.CHANNLE_EST CHANNLE_EST_LIST = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channle_est_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->channle_est_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.NR_SRS_IQ_EST)
}

::google::protobuf::uint8* NR_SRS_IQ_EST::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NR_SRS_IQ_EST)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.CHANNLE_EST CHANNLE_EST_LIST = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channle_est_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->channle_est_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NR_SRS_IQ_EST)
  return target;
}

size_t NR_SRS_IQ_EST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NR_SRS_IQ_EST)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .protocol.CHANNLE_EST CHANNLE_EST_LIST = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->channle_est_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->channle_est_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NR_SRS_IQ_EST::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.NR_SRS_IQ_EST)
  GOOGLE_DCHECK_NE(&from, this);
  const NR_SRS_IQ_EST* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NR_SRS_IQ_EST>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.NR_SRS_IQ_EST)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.NR_SRS_IQ_EST)
    MergeFrom(*source);
  }
}

void NR_SRS_IQ_EST::MergeFrom(const NR_SRS_IQ_EST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NR_SRS_IQ_EST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channle_est_list_.MergeFrom(from.channle_est_list_);
}

void NR_SRS_IQ_EST::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.NR_SRS_IQ_EST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NR_SRS_IQ_EST::CopyFrom(const NR_SRS_IQ_EST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NR_SRS_IQ_EST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NR_SRS_IQ_EST::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->channle_est_list())) return false;
  return true;
}

void NR_SRS_IQ_EST::Swap(NR_SRS_IQ_EST* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NR_SRS_IQ_EST::InternalSwap(NR_SRS_IQ_EST* other) {
  using std::swap;
  CastToBase(&channle_est_list_)->InternalSwap(CastToBase(&other->channle_est_list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NR_SRS_IQ_EST::GetMetadata() const {
  protobuf_srs_2dinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_srs_2dinfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CHANNLE_EST::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHANNLE_EST::kImageFieldNumber;
const int CHANNLE_EST::kRealFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHANNLE_EST::CHANNLE_EST()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_srs_2dinfo_2eproto::scc_info_CHANNLE_EST.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.CHANNLE_EST)
}
CHANNLE_EST::CHANNLE_EST(const CHANNLE_EST& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&image_, &from.image_,
    static_cast<size_t>(reinterpret_cast<char*>(&real_) -
    reinterpret_cast<char*>(&image_)) + sizeof(real_));
  // @@protoc_insertion_point(copy_constructor:protocol.CHANNLE_EST)
}

void CHANNLE_EST::SharedCtor() {
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&real_) -
      reinterpret_cast<char*>(&image_)) + sizeof(real_));
}

CHANNLE_EST::~CHANNLE_EST() {
  // @@protoc_insertion_point(destructor:protocol.CHANNLE_EST)
  SharedDtor();
}

void CHANNLE_EST::SharedDtor() {
}

void CHANNLE_EST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CHANNLE_EST::descriptor() {
  ::protobuf_srs_2dinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_srs_2dinfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHANNLE_EST& CHANNLE_EST::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_srs_2dinfo_2eproto::scc_info_CHANNLE_EST.base);
  return *internal_default_instance();
}


void CHANNLE_EST::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.CHANNLE_EST)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&image_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&real_) -
        reinterpret_cast<char*>(&image_)) + sizeof(real_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHANNLE_EST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.CHANNLE_EST)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_image();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 real = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_real();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &real_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.CHANNLE_EST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.CHANNLE_EST)
  return false;
#undef DO_
}

void CHANNLE_EST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.CHANNLE_EST)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 image = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->image(), output);
  }

  // required int32 real = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->real(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.CHANNLE_EST)
}

::google::protobuf::uint8* CHANNLE_EST::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CHANNLE_EST)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 image = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->image(), target);
  }

  // required int32 real = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->real(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.CHANNLE_EST)
  return target;
}

size_t CHANNLE_EST::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.CHANNLE_EST)
  size_t total_size = 0;

  if (has_image()) {
    // required int32 image = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->image());
  }

  if (has_real()) {
    // required int32 real = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->real());
  }

  return total_size;
}
size_t CHANNLE_EST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.CHANNLE_EST)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 image = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->image());

    // required int32 real = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->real());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHANNLE_EST::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.CHANNLE_EST)
  GOOGLE_DCHECK_NE(&from, this);
  const CHANNLE_EST* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHANNLE_EST>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.CHANNLE_EST)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.CHANNLE_EST)
    MergeFrom(*source);
  }
}

void CHANNLE_EST::MergeFrom(const CHANNLE_EST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.CHANNLE_EST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      image_ = from.image_;
    }
    if (cached_has_bits & 0x00000002u) {
      real_ = from.real_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHANNLE_EST::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.CHANNLE_EST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHANNLE_EST::CopyFrom(const CHANNLE_EST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.CHANNLE_EST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHANNLE_EST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CHANNLE_EST::Swap(CHANNLE_EST* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHANNLE_EST::InternalSwap(CHANNLE_EST* other) {
  using std::swap;
  swap(image_, other->image_);
  swap(real_, other->real_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CHANNLE_EST::GetMetadata() const {
  protobuf_srs_2dinfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_srs_2dinfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::NR_SRS_IQ_EST* Arena::CreateMaybeMessage< ::protocol::NR_SRS_IQ_EST >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::NR_SRS_IQ_EST >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::protocol::CHANNLE_EST* Arena::CreateMaybeMessage< ::protocol::CHANNLE_EST >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::CHANNLE_EST >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
