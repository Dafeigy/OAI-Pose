/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ul_srs_est.proto */

#ifndef PROTOBUF_C_ul_5fsrs_5fest_2eproto__INCLUDED
#define PROTOBUF_C_ul_5fsrs_5fest_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _NRpose__NRSRSPACK NRpose__NRSRSPACK;
typedef struct _NRpose__NRSRSINFO NRpose__NRSRSINFO;
typedef struct _NRpose__RESULT NRpose__RESULT;


/* --- enums --- */


/* --- messages --- */

struct  _NRpose__NRSRSPACK
{
  ProtobufCMessage base;
  size_t n_estimation;
  NRpose__NRSRSINFO **estimation;
  int32_t signal_power;
  int32_t noise_power;
  int32_t call_time;
  int32_t func_cnt;
  char *start_time;
};
#define NRPOSE__NR__SRS__PACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nrpose__nr__srs__pack__descriptor) \
    , 0,NULL, 0, 0, 0, 0, NULL }


struct  _NRpose__NRSRSINFO
{
  ProtobufCMessage base;
  size_t n_ls_srs;
  NRpose__RESULT **ls_srs;
};
#define NRPOSE__NR__SRS__INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nrpose__nr__srs__info__descriptor) \
    , 0,NULL }


/*
 * RESULT存放的其实是和信道相关的复数结构，由于以上指标都是复数形式所以就统一命名为RESULT
 */
struct  _NRpose__RESULT
{
  ProtobufCMessage base;
  int32_t image;
  int32_t real;
};
#define NRPOSE__RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nrpose__result__descriptor) \
    , 0, 0 }


/* NRpose__NRSRSPACK methods */
void   nrpose__nr__srs__pack__init
                     (NRpose__NRSRSPACK         *message);
size_t nrpose__nr__srs__pack__get_packed_size
                     (const NRpose__NRSRSPACK   *message);
size_t nrpose__nr__srs__pack__pack
                     (const NRpose__NRSRSPACK   *message,
                      uint8_t             *out);
size_t nrpose__nr__srs__pack__pack_to_buffer
                     (const NRpose__NRSRSPACK   *message,
                      ProtobufCBuffer     *buffer);
NRpose__NRSRSPACK *
       nrpose__nr__srs__pack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nrpose__nr__srs__pack__free_unpacked
                     (NRpose__NRSRSPACK *message,
                      ProtobufCAllocator *allocator);
/* NRpose__NRSRSINFO methods */
void   nrpose__nr__srs__info__init
                     (NRpose__NRSRSINFO         *message);
size_t nrpose__nr__srs__info__get_packed_size
                     (const NRpose__NRSRSINFO   *message);
size_t nrpose__nr__srs__info__pack
                     (const NRpose__NRSRSINFO   *message,
                      uint8_t             *out);
size_t nrpose__nr__srs__info__pack_to_buffer
                     (const NRpose__NRSRSINFO   *message,
                      ProtobufCBuffer     *buffer);
NRpose__NRSRSINFO *
       nrpose__nr__srs__info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nrpose__nr__srs__info__free_unpacked
                     (NRpose__NRSRSINFO *message,
                      ProtobufCAllocator *allocator);
/* NRpose__RESULT methods */
void   nrpose__result__init
                     (NRpose__RESULT         *message);
size_t nrpose__result__get_packed_size
                     (const NRpose__RESULT   *message);
size_t nrpose__result__pack
                     (const NRpose__RESULT   *message,
                      uint8_t             *out);
size_t nrpose__result__pack_to_buffer
                     (const NRpose__RESULT   *message,
                      ProtobufCBuffer     *buffer);
NRpose__RESULT *
       nrpose__result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nrpose__result__free_unpacked
                     (NRpose__RESULT *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*NRpose__NRSRSPACK_Closure)
                 (const NRpose__NRSRSPACK *message,
                  void *closure_data);
typedef void (*NRpose__NRSRSINFO_Closure)
                 (const NRpose__NRSRSINFO *message,
                  void *closure_data);
typedef void (*NRpose__RESULT_Closure)
                 (const NRpose__RESULT *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor nrpose__nr__srs__pack__descriptor;
extern const ProtobufCMessageDescriptor nrpose__nr__srs__info__descriptor;
extern const ProtobufCMessageDescriptor nrpose__result__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ul_5fsrs_5fest_2eproto__INCLUDED */
